{"version":3,"sources":["Cart/Cart.module.css","SubscriptionType/SubscriptionType.js","Cart/Cart.js","App.js","serviceWorker.js","index.js","SubscriptionType/SubscriptionType.module.css"],"names":["module","exports","subscriptionType","props","className","classes","subtype","name","subPrice","price","counter","ticker","onClick","changed","id","icon","fontSize","typetotal","type","onChange","value","count","clearButton","cart","total","subCounts","forEach","item","subTotals","map","index","key","box","subTotalsClass","outerbox","noflex","cartClass","cartdrawer","expandState","push","expanded","visible","join","toggle","expand","library","add","faMinus","faPlus","faTimesCircle","faChevronDown","faChevronUp","App","state","subscriptionTypes","purchase","hasTotal","toggleSubsHandler","doesShow","setState","countChangedHandler","event","subIndex","findIndex","p","subType","target","expandHandler","this","Cart","SubscriptionType","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b886827.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cartdrawer\":\"Cart_cartdrawer__22xTw\",\"outerbox\":\"Cart_outerbox__2oay3\",\"box\":\"Cart_box__3Y9Ie\",\"expanded\":\"Cart_expanded__1u5oD\",\"visible\":\"Cart_visible__1Ku2P\",\"toggle\":\"Cart_toggle__3cMQu\",\"noflex\":\"Cart_noflex__2jxmg\"};","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport classes from \"./SubscriptionType.module.css\";\r\n\r\nconst subscriptionType = (props) => {\r\n  return (\r\n    <div className={classes.subtype}>\r\n      <p>\r\n        Subscription Type: {props.name} -{\" \"}\r\n        <span className={classes.subPrice}>${props.price}</span>\r\n      </p>\r\n      <div className={classes.counter}>\r\n        <button className={classes.ticker} onClick={props.changed} id=\"minus\">\r\n          <FontAwesomeIcon className=\"fa-2x\" icon=\"minus\" fontSize=\"20px\" />\r\n        </button>\r\n\r\n        <input\r\n          className={classes.typetotal}\r\n          type=\"number\"\r\n          onChange={props.changed}\r\n          value={props.count}\r\n        />\r\n\r\n        <button className={classes.ticker} onClick={props.changed} id=\"plus\">\r\n          <FontAwesomeIcon className=\"fa-2x\" icon=\"plus\" />\r\n        </button>\r\n      </div>\r\n\r\n      <div className={classes.clearButton} id=\"clear\" onClick={props.changed}>\r\n        <FontAwesomeIcon icon=\"times-circle\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default subscriptionType;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport classes from \"./Cart.module.css\";\r\n\r\nconst cart = (props) => {\r\n  let total = 0;\r\n  const totalHandler = (item) => {\r\n    total += item.price * item.count;\r\n  };\r\n\r\n  props.subCounts.forEach(totalHandler);\r\n\r\n  const subTotals = props.subCounts.map((type, index, key) => (\r\n    <div key={type.id} className={classes.box}>\r\n      <p>\r\n        {type.name} Subscriptions ---\r\n        {type.count} --- ${type.count * type.price}\r\n      </p>\r\n    </div>\r\n  ));\r\n\r\n  let subTotalsClass = [classes.outerbox, classes.noflex];\r\n  let cartClass = [classes.cartdrawer];\r\n  if (props.expandState) {\r\n    cartClass.push(classes.expanded);\r\n  }\r\n  if (total > 0) {\r\n    cartClass.push(classes.visible);\r\n  }\r\n\r\n  return (\r\n    <div className={cartClass.join(\" \")}>\r\n      <div>\r\n        <div className={classes.outerbox}>\r\n          <div className={classes.box}>\r\n            <p>Total</p>\r\n          </div>\r\n          <div className={classes.box}>\r\n            <p>${total}</p>\r\n          </div>\r\n        </div>\r\n        {props.expandState ? (\r\n          <FontAwesomeIcon\r\n            icon=\"chevron-up\"\r\n            className={classes.toggle}\r\n            onClick={() => {\r\n              props.expand();\r\n            }}\r\n          />\r\n        ) : (\r\n          <FontAwesomeIcon\r\n            icon=\"chevron-down\"\r\n            className={classes.toggle}\r\n            onClick={() => {\r\n              props.expand();\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className={subTotalsClass.join(\" \")}>{subTotals}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default cart;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport SubscriptionType from \"./SubscriptionType/SubscriptionType\";\r\nimport Cart from \"./Cart/Cart\";\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faMinus,\r\n  faPlus,\r\n  faTimesCircle,\r\n  faChevronDown,\r\n  faChevronUp,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(faMinus, faPlus, faTimesCircle, faChevronDown, faChevronUp);\r\n\r\nclass App extends Component {\r\n  state = {\r\n    subscriptionTypes: [\r\n      { id: \"1\", name: \"Regular\", price: 155, count: 0 },\r\n      { id: \"2\", name: \"Student/Senior\", price: 120, count: 0 },\r\n    ],\r\n    purchase: false,\r\n    expanded: false,\r\n    total: 0,\r\n    hasTotal: true,\r\n  };\r\n\r\n  toggleSubsHandler = () => {\r\n    const doesShow = this.state.purchase;\r\n    this.setState({ purchase: !doesShow });\r\n  };\r\n\r\n  countChangedHandler = (event, id) => {\r\n    let total = this.state.total;\r\n    let expanded = this.state.expanded;\r\n\r\n    const subIndex = this.state.subscriptionTypes.findIndex((p) => {\r\n      return p.id === id;\r\n    });\r\n\r\n    const subType = {\r\n      ...this.state.subscriptionTypes[subIndex],\r\n    };\r\n\r\n    if (event.target.id === \"plus\") {\r\n      subType.count++;\r\n      total += subType.price;\r\n    } else if (event.target.id === \"minus\" && subType.count > 0) {\r\n      subType.count--;\r\n      total -= subType.price;\r\n    } else if (event.target.id === \"clear\") {\r\n      total -= subType.count * subType.price;\r\n      subType.count = 0;\r\n    } else {\r\n      total -= subType.count * subType.price;\r\n      subType.count = event.target.value;\r\n      total += subType.count * subType.price;\r\n    }\r\n\r\n    if (total === 0) {\r\n      expanded = false;\r\n    }\r\n\r\n    const subscriptionTypes = [...this.state.subscriptionTypes];\r\n    subscriptionTypes[subIndex] = subType;\r\n\r\n    this.setState({\r\n      subscriptionTypes: subscriptionTypes,\r\n      total: total,\r\n      expanded: expanded,\r\n    });\r\n  };\r\n\r\n  expandHandler = (event) => {\r\n    if (this.state.expanded) {\r\n      this.setState({ expanded: false });\r\n    } else {\r\n      this.setState({ expanded: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let subscriptionTypes = null;\r\n    let purchase = this.state.purchase;\r\n    let cart = null;\r\n\r\n    cart = (\r\n      <div>\r\n        <Cart\r\n          subCounts={this.state.subscriptionTypes}\r\n          expand={(event) => this.expandHandler(event)}\r\n          expandState={this.state.expanded}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    subscriptionTypes = (\r\n      <div>\r\n        {this.state.subscriptionTypes.map((type, index) => {\r\n          return (\r\n            <SubscriptionType\r\n              key={type.id}\r\n              name={type.name}\r\n              changed={(event) => this.countChangedHandler(event, type.id)}\r\n              count={type.count}\r\n              price={type.price}\r\n            />\r\n          );\r\n        })}\r\n        <button onClick={this.toggleSubsHandler}>Return</button>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.hasTotal ? cart : null}\r\n        <h1>Buy some tickets you filthy scum</h1>\r\n        <p>And bring some pie with you when you get to the theatre</p>\r\n\r\n        {purchase ? (\r\n          subscriptionTypes\r\n        ) : (\r\n          <button onClick={this.toggleSubsHandler}>\r\n            Purchase Subscriptions\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ticker\":\"SubscriptionType_ticker__26DH1\",\"clearButton\":\"SubscriptionType_clearButton__2AB-t\",\"clear\":\"SubscriptionType_clear__2tHFI\",\"subtype\":\"SubscriptionType_subtype__sOA42\",\"subPrice\":\"SubscriptionType_subPrice__HN3UM\",\"counter\":\"SubscriptionType_counter__3_V9q\",\"typetotal\":\"SubscriptionType_typetotal__gTFNy\"};"],"sourceRoot":""}